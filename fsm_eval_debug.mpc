"""
Evaluates a public FSM from various private 
string fragments from different users obliviously.
Prints steps of computation since THIS WILL REVEAL PRIVATE DATA.

Compilation: (From main folder)
./compile.py -M fsm_eval_debug N_STATES N_SYMBOLS \
INPUT_SIZE_0 INPUT_SIZE_1 [...]

Params:
N_STATES : integer (1<=x<=64)
N_SYMBOLS : integer (1<=x<=64)
INPUT_SIZE_N : integer (any non negative)
    - represents the size of player N
"""
# Primitives
# Pseudorandom Secret Sharing (PSS): sint.get_random_int
# Pseudorandom Bit Sharing (PBS): _secret.get_random_bit
# Bit Decomposition (BD): sint.bit_decompose

# imports
from math import log, ceil

# Parameter Constraints
N_STATES, N_SYMBOLS = int(program.args[1]), int(program.args[2])
assert 0 < N_STATES < 65
assert 0 < N_SYMBOLS < 65

SYMBOL_BITS = ceil(log(N_SYMBOLS, 2))


# Get Player Inputs
N_PARTIES = len(program.args[3:])


@if_(N_PARTIES != get_number_of_players())
def _():
    runtime_error(
        "Invalid arguments passed:\n Expected (%s) Players, got (%s)",
        N_PARTIES,
        get_number_of_players(),
    )


assert all(int(x) >= 0 for x in program.args[3:])
N_INPUT = sum(int(x) for x in program.args[3:])

input_string = Array(N_INPUT, sgf2n)

# Compile time loop (there is currently no way to implement this at runtime)
offset = 0
for i, party_input_size in enumerate(program.args[3:]):
    party_input_size = int(party_input_size)
    for j in range(party_input_size):
        input_string[offset + j] = sgf2n.get_raw_input_from(i)
        print_ln(
            "User[%s] sends value (%s)", i, cint(input_string[offset + j].reveal())
        )
    offset += party_input_size

print_ln(
    "Configuration: N_STATES=%s, N_SYMBOLS=%s, N_PARTIES=%s, N_INPUT=%s, bit_lenght=%s, symbol_bits=%s",
    N_STATES,
    N_SYMBOLS,
    N_PARTIES,
    N_INPUT,
    program.bit_length,
    SYMBOL_BITS,
)


# Initialize FSM
def construct_transition_matrix():
    """
    Construct and returns a new (shared) transition matrix,
    the states symbolize numbers from 0 to (N_STATES-1)
    and the transition function is:
    f(sym, state) = (sym+state mod N_STATES).
    This produces a final complete (dense) matrix where
    for each state there are N_SYMBOLS transitions
    """
    transition_matrix = Matrix(N_STATES, N_SYMBOLS, sgf2n)

    # Changed loops to compile time (enables N_STATES up to 64)
    for i in range(N_STATES):
        for j in range(N_SYMBOLS):
            transition_matrix[i][j] = 1 << ((i + j) % N_STATES)

    return transition_matrix


T = construct_transition_matrix()


def construct_final_state_set():
    """
    Returns an array indicating whenever a state is final.
    A state is final if p(state)=(state%2 == 0) holds.
    """
    is_final_state = Array(N_STATES, sgf2n)

    for i in range(N_STATES):
        is_final_state[i] = sgf2n((i + 1) % 2)

    return is_final_state


F = construct_final_state_set()


# Support for non-binary Alphabets
def decoding_fun(symbol):
    """
    Returns a sequence of N_SYMBOLS bits representing the
    symbol (eg. '000010' represent '4').
    The sequence remains oblivious.
    """
    symbol_bit_decomposition = Array.create_from(symbol.bit_decompose(SYMBOL_BITS))

    decoding = Array(N_SYMBOLS, sgf2n)
    decoding.assign_all(1)

    @for_range(N_SYMBOLS)
    def _(i):
        i_bit_decomposition = Array.create_from(i.bit_decompose(SYMBOL_BITS))

        @for_range(SYMBOL_BITS)
        def _(j):
            decoding[i] *= i_bit_decomposition[j].if_else(
                symbol_bit_decomposition[j], 1 - symbol_bit_decomposition[j]
            )

    return decoding


def print_array(A, string, decoding_array_fun):
    print_ln(string)

    @for_range(N_STATES)
    def _(i):
        print_ln("A[%s]=%s", i, decoding_array_fun(A[i]))


# FMS evaluation and transition functions
def fsm_transition(state, symbol):
    """
    Obliviously computes the next state of the FSM given
    its current state, symbol and the transition matrix
    (passed as the global variable "T")
    """
    state_bit_decomposition = Array.create_from(state.bit_decompose(N_STATES))
    symbol_decoding = decoding_fun(symbol)

    new_state = MemValue(sgf2n(0))

    @for_range(N_STATES)
    def _(i):
        temp = MemValue(sgf2n(0))

        @for_range(N_SYMBOLS)
        def _(j):
            temp.write(temp + T[i][j] * symbol_decoding[j])

        new_state.write(new_state + temp * state_bit_decomposition[i])

    print_ln(
        "State Update: OldState[%s], Symbol[%s] -> NewState[%s]",
        cint(state.reveal()),
        cint(symbol.reveal()),
        cint(new_state.reveal()),
    )
    return new_state.read()


def fsm_evaluation(string):
    """
    Evaluates the acceptance of a string on the given FSM.
    The FSM is defined by global variables T and F.
    Initial state is forced to 0 while alphabet and states
    set are defined by the parameter N_STATES and N_SYMBOLS.
    """
    state = MemValue(sgf2n(1))

    @for_range(N_INPUT)
    def _(i):
        state.write(fsm_transition(state, string[i]))

    is_accepted = MemValue(sgf2n(0))

    @for_range(N_STATES)
    def _(i):
        state_bit_decomposition = Array.create_from(state.bit_decompose(N_STATES))
        is_accepted.write(is_accepted + state_bit_decomposition[i] * F[i])

    return is_accepted.read()


acceptance = fsm_evaluation(input_string)


@if_e(acceptance.reveal())
def _():
    print_ln("String has been accepted")


@else_
def _():
    print_ln("String has been refused")
